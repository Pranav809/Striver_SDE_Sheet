//Using two pointer approach and a temporary array
class Solution {
public:
    void sortColors(vector<int>& nums) {
        vector<int> temp(nums.size());
        int i = 0;
        int nz = 0, nt = nums.size()-1;
        while(i<nums.size()){
            if(nums[i]==0){
                temp[nz++] = nums[i++];
            }
            else if(nums[i]==2){
                temp[nt--] = nums[i++]; 
            }
            else{
                i++;
            }
        }
        
        for(int i=nz;i<=nt;i++){
            temp[i] = 1;
        }
        
        nums = temp;
    }
};

/*
Time Complexity : O(n)
Space Complexity : O(n)
*/


//Using two pointer algorithm and the same array
//In-place solution
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i = 0;
        int nz = 0, nt = nums.size() - 1;
        while(i <= nt){
            if(nums[i]==0){
                swap(nums[i++],nums[nz++]);
            }
            else if(nums[i]==2){
                swap(nums[i],nums[nt--]);
            }
            else{
                i++;
            }
        }
    }
};
/*
Time Complexity : O(n)
Space Complexity : O(1)
*/
