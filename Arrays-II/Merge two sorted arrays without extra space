//Firstly doing it with extra space
#include <bits/stdc++.h> 
vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {
	// Write your code here.
    if(n==0)
            return arr1;
        
        int i = 0;
        int j = 0;
        int k = 0;
        vector<int> temp;
        
        while(i<m && j<n){
            if(arr1[i]<=arr2[j]){
                temp.push_back(arr1[i++]);
            }
            else{
                temp.push_back(arr2[j++]);
            }
        }
        
        while(i<m){
            temp.push_back(arr1[i++]);
        }
        
        while(j<n){
            temp.push_back(arr2[j++]);
        }
        
       
        return temp;
}
/*
Time Complexity : O(m+n)
Space Complexity : O(m+n)
*/


//Without using any extra space 
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(n==0)
            return;
        
        for(int i=0;i<m;i++){
            
            if(nums1[i] > nums2[0]){
                swap(nums1[i],nums2[0]);
            }
            
            int first = nums2[0];
            int j;
            for(j=1;j<n && first>nums2[j];j++){
                nums2[j-1] = nums2[j];
            }
            nums2[j-1] = first;
        }
        
        for(int i=0;i<n;i++){
            nums1[m+i] = nums2[i];
        }
        
    }
};
/*
Time Complexity : O(m*n) 
Space Complexity : O(1)
*/
