//First approach
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return nums[i];
            }
        }
        return -1;
    }
};
/*
Time Complexity : O(nlogn) + O(n)
Space Complexity : O(1)
*/

//Second Approach : Using frequency array
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int> freq(n,0);
        
        for(int i=0;i<n;i++)
        {
            if(freq[nums[i]]==0){
                freq[nums[i]]++;
            }
            else{
                return nums[i];
            }
        }
        return -1;
    }
};
/*
Time Complexity : O(n)
Space Complexity : O(1)
*/

// THird approach : Using Linked List cycle method
